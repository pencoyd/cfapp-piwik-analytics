// Generated by CoffeeScript 1.4.0
/*
* This is Miniature Hipster
*  @name      Miniature Hipster
*  @version   0.0.16
*  @author    Rob Friedman <px@ns1.net>
*  @url       <http://playerx.net>
*  @license   https://github.com/px/cfapp-piwik-analytics/raw/master/LICENSE.txt
*
*/

var conserr, consl, fixScheme, loadScript, p, _debug;

p = window._pk_loaded = {
  stuff: "stuff"
};

_debug = true;

consl = function(m) {
  return window.console.log("_px_> " + m);
};

conserr = function(m) {
  return window.console.error("*px**> " + m);
};

fixScheme = function(url) {
  var url2;
  if (_debug) {
    consl("fixScheme(" + url + ")");
  }
  if (_debug) {
    consl("window.location.protocol=" + window.location.protocol);
  }
  url2 = url;
  if (/^(http).*/.test(url)) {
    url2 = url;
  } else {
    url2 = "https:" + url;
  }
  return url2;
};

/*
* loadScript(f)
* use CloudFlare.require to load the javascript f requested
* and then execute the callback c
*/


loadScript = function(f, callback) {
  consl("loadScript via CloudFlare.require [" + f + "], " + callback);
  return CloudFlare.require([f], callback);
};

CloudFlare.define("piwik_analytics", ["piwik_analytics/config"], function(_config) {
  "use strict";

  var myPiwik, _default_piwik_version, _delay;
  myPiwik = {};
  _config = _config || {};
  try {
    _config = window.__CF.AJS.piwik_analytics || {};
  } catch (e) {
    conserr("the _config is broken");
  }
  /* because sometimes a minor delay is needed, in seconds.
  * FIXME because I'm sure we can do without.
  */

  _delay = 0.11;
  _default_piwik_version = "1.10.1";
  if (_debug) {
    consl("Hello from the Piwik CloudFlare App!" + _config);
    consl("window.localStorage.clear()=" + window.localStorage.clear());
  }
  myPiwik.isPiwik = function() {
    consl("isPiwik() loaded?");
    window._paq = window._paq || [];
    try {
      window._paq.push([
        function() {
          return window._pk_visitor_id = this.getVisitorId();
        }
      ]);
    } catch (e) {
      conserr("issue with window._paq is " + e);
    }
    try {
      if (window._pk_visitor_id === undefined || window._pk_visitor_id === "") {
        conserr(" no window._pk_visitor_id piwik maybe failed to load!!! Oh Noe :( :( :(  ): ): ): ");
        return false;
      } else if (typeof window._pk_visitor_id === "string" && window._pk_visitor_id !== "") {
        consl("piwik loaded... probably maybe. window._pk_visitor_id='" + window._pk_visitor_id + "', and tracker hit.");
        return true;
      }
    } catch (e) {
      conserr("isPiwik() " + e);
    }
    return false;
  };
  myPiwik.appChange = function() {
    if (_debug) {
      consl("appChange()");
    }
    try {
      window.document.getElementById("app_change").innerHTML = "appChange -- getVisitorId=" + window._pk_visitor_id;
      consl("_pk_visitor_id=" + window._pk_visitor_id);
      myPiwik.isPiwik;
    } catch (e) {
      conserr("appChange " + e);
    }
    return true;
  };
  /*
  * activate()
  * this will load and activate the piwik.js from desired location
  * fixup the tracker url for missing scheme on file:// url locations
  */

  myPiwik.activate = function() {
    var _js;
    consl("activate() started");
    _js = "";
    if (_config.use_cdnjs) {
      consl("_config.use_cdnjs=" + _config.use_cdnjs);
    } else {
      conserr("_config.use_cdnjs=" + _config.use_cdnjs);
    }
    if (!_config.use_cdnjs && _config.piwik_js !== undefined && _config.piwik_js !== "") {
      consl("attempting to use configurered piwik_js=" + _config.piwik_js);
      _js = _config.piwik_js;
    } else {
      consl("use_cdnjs is enabled");
      _js = _config.default_piwik_js;
    }
    loadScript(unescape(_js), "myPiwik.isPiwik()");
    if (_config.site_id === undefined || isNaN(_config.site_id) || (_config.site_id === "")) {
      conserr("Invalid site_id; defaulting to '1'");
      _config.site_id = 1;
    } else {
      consl("regular site_id from _config " + _config.site_id);
    }
    if (_config.piwik_tracker === undefined || _config.piwik_tracker === "") {
      _config.piwik_tracker = "FIXME";
    } else {
      _config.piwik_tracker = fixScheme(unescape(_config.piwik_tracker));
    }
    return consl("activate() completed");
  };
  /*
  * paqPush()
  *   push our Piwik options into the window._paq array
  */

  myPiwik.paqPush = function() {
    if (_debug) {
      consl("paqPush()");
    }
    window._paq = window._paq || [];
    window._paq.push(['setSiteId', unescape(_config.site_id)]);
    window._paq.push(['setTrackerUrl', unescape(_config.piwik_tracker)]);
    if (_config.link_tracking === "true") {
      window._paq.push(['enableLinkTracking', true]);
    } else {
      window._paq.push(['enableLinkTracking', false]);
    }
    if (_config.set_do_not_track === "true") {
      window._paq.push(['setDoNotTrack', true]);
    } else {
      window._paq.push(['setDoNotTrack', false]);
    }
    if (!_config.paq_push && _config.paq_push !== undefined && _config.paq_push !== "") {
      window._paq.push(_config.paq_push);
    }
    if (_debug) {
      consl("paqPush() finished ok!");
    }
    return _config.paq_push;
  };
  /*
  * noScript()
  * this is kind of a waste as it will never get run if javascript is not enabled
  */

  myPiwik.noScript = function() {
    var cursor, script, test_site;
    if (_debug) {
      consl("noScript()");
    }
    test_site = fixScheme(unescape(_config.piwik_tracker));
    test_site += "?id=" + _config.site_id + "&amp;rec=1";
    if (_debug) {
      consl("noScript| test_site=" + test_site);
    }
    script = document.createElement("noscript");
    cursor = document.getElementsByTagName("script", true)[0];
    return cursor.parentNode.insertBefore(script, cursor);
  };
  /*
  * do stuff to get the party started
  */

  myPiwik.activate();
  myPiwik.paqPush();
  myPiwik.noScript();
  /*
  * instantiate and configure a new instance of the Piwik when it is returned
  *  myPiwik = new Piwik(_config)
  */

  return myPiwik;
});

window._pk_loaded = CloudFlare.require(["piwik_analytics"], function(_config) {
  return true;
});

window._pk_loaded.then(function() {
  return modules({
    modules: modules
  }, function() {
    return error({
      console: console
    });
  });
});
